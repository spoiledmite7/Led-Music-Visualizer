/**
* Copyleft license 

*FOR PERSONAL USE ONLY NON PROFITABLE 
*If you make a better version, make sure to include the
creators of code-free to distribute code but only ONLY NON PROFITABLE AND INCLUDED CREATORS 

* @copyleft devon Crawford
* Creator of LEDS COLORS
* https://www.youtube.com/watch?v=lU1GVVU9gLU&t=214s

* @copyleft Clyde Lettsome, PhD, PE 
* Creator of Freque read 
*https://www.youtube.com/watch?v=wbeV0J30LGQ&t=250s

* @copyleft Evan Willman 
* Editor of code 
 */


#include <FastLED.h>
#include "arduinoFFT.h"

#define LED_PIN     11
#define NUM_LEDS    300
#define SAMPLES 128
#define SAMPLING_FREQUENCY 2000
#define updateLEDS 10

arduinoFFT FFT = arduinoFFT();

unsigned int samplingPeriod; 
unsigned long microSecconds;

double vReal [SAMPLES];
double vImag [SAMPLES];

CRGB leds[NUM_LEDS];

struct color {
  int r;
  int g;
  int b;
};
typedef struct color Color;

void setup() {
    Serial.begin(115200);
    samplingPeriod = round(1000000*(1.0/SAMPLING_FREQUENCY));

     FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
}

void loop() 
{  unsigned long time = millis();

// Shift all LEDs to the right by updateLEDS number each time
    for(int i = NUM_LEDS - 1; i >= updateLEDS; i--) {
        leds[i] = leds[i - updateLEDS];
    }

    for (int i = 0; i <=SAMPLES; i++){
      microSecconds = micros();

     vReal[i] = analogRead(20); //this is the pin for the teency make sure its on the real pin !!!!!!!!
     vImag[i] = 0;
    }

    FFT.Windowing(vReal,SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD );
    FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
    FFT.ComplexToMagnitude(vReal,vImag, SAMPLES);

    double newPitch = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
    Serial.println(newPitch); //most dom frequency 
    delay(1);
    
// Set the left most updateLEDs with the new color

    Color nc = pitchConv(double newPitch);
  
    for(int i = 0; i < updateLEDS; i++){
      leds[i] = CRGB(nc.r, nc.g, nc.b);
      delay(2);
    } 
    FastLED.show();
}
/**
 * Creates a new color from pitch and brightness readings
 * int p         analogRead(pitch) representing the voltage between 0 and 5 volts
 * double b      analogRead(brightness) representing volume of music for LED brightness
 * returns Color structure with rgb values, which appear synced to the music
 */
Color pitchConv(double p, int b) {
  Color c;
    double bright = convBrightness(b);

    if(p < 40) {
      setColor(&c, 255, 0, 0);
    }
    else if(p >= 40 && p <= 77) {
      int b = (p - 40) * (255/37.0000);
      setColor(&c, 255, 0, b);
    }
    else if(p > 77 && p <= 205) {
      int r = 255 - ((p - 78) * 2);
      setColor(&c, r, 0, 255);
    }
    else if(p >= 206 && p <= 238) {
      int g = (p - 206) * (255/32.0000);
      setColor(&c, 0, g, 255);
    }
    else if(p <= 239 && p <= 250) {
      int r = (p - 239) * (255/11.0000);
      setColor(&c, r, 255, 255);
    }
    else if(p >= 251 && p <= 270) {
      setColor(&c, 255, 255, 255);
    }
    else if(p >= 271 && p <= 398) {
      int rb = 255-((p-271)*2);
      setColor(&c, rb, 255, rb);
    }
    else if(p >= 398 && p <= 653) {
      setColor(&c, 0, 255-(p-398), (p-398));
    }
    else {
      setColor(&c, 255, 0, 0);
    }
    
    setColor(&c, c.r * bright, c.g * bright, c.b * bright);
    return c;
}

double convBrightness(int b) {
  double c = b / 614.0000;
    if( c < 0.2 ) {
        c = 0;
    }
    else if(c > 1) {
        c = 1.00;
    }
   return c;
}
    
void setColor(Color *c, int r, int g, int b) {
    c->r = r;
    c->g = g;
    c->b = b;
}
